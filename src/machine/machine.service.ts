import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Between, LessThanOrEqual, DataSource } from 'typeorm';
import { MachineMaster } from '../entities/machine-master.entity';
import { MachineStatusHistory } from '../entities/machine-status-history.entity';
import { ProductionProgress } from '../entities/production-progress.entity';
import e from 'express';

@Injectable()
export class MachineService {
  constructor(
    // Inject DataSource ƒë·ªÉ s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c truy v·∫•n n√¢ng cao
    private dataSource: DataSource,
    
    // Inject c√°c repository t∆∞∆°ng ·ª©ng v·ªõi c√°c entity
    @InjectRepository(MachineMaster)
    private machineRepo: Repository<MachineMaster>,

    @InjectRepository(MachineStatusHistory)
    private statusRepo: Repository<MachineStatusHistory>,

    @InjectRepository(ProductionProgress)
    private progressRepo: Repository<ProductionProgress>,
  ) {}

  /**
   * L·∫•y danh s√°ch m√°y c·ªßa nh√† m√°y, bao g·ªìm tr·∫°ng th√°i, t·ªça ƒë·ªô, hi·ªáu su·∫•t,...
   * @param factory_type s·ªë nh√† m√°y c·∫ßn l·∫•y (VD: 2 l√† Mercury)
   */
    async getMachineSummary(factory_type: number) {
        const now = new Date(new Date().getTime() + 7 * 60 * 60 * 1000); // m√∫i gi·ªù Tokyo

        // T√≠nh ng√†y v√† gi·ªù t∆∞∆°ng ·ª©ng v·ªõi ca
        const startOfShift = new Date(now);
        startOfShift.setHours(8, 0, 0, 0);

        let shiftDate: string;
        let hour_for_query: number;

        if (now >= startOfShift) {
            shiftDate = now.toISOString().split('T')[0];
            const diffMs = now.getTime() - startOfShift.getTime();
            const hour = Math.floor(diffMs / (60 * 60 * 1000));
            hour_for_query = hour// - 1; // Gi·ªù hi·ªán t·∫°i tr·ª´ 1 ƒë·ªÉ l·∫•y gi·ªù tr∆∞·ªõc ƒë√≥
        } else {
            const yesterday = new Date(now);
            yesterday.setDate(now.getDate() - 1);
            shiftDate = yesterday.toISOString().split('T')[0];
            const startOfYesterday = new Date(yesterday);
            startOfYesterday.setHours(8, 0, 0, 0);
            const diffMs = now.getTime() - startOfYesterday.getTime();
            const hour = Math.floor(diffMs / (60 * 60 * 1000));
            hour_for_query = hour// - 1; // Gi·ªù hi·ªán t·∫°i tr·ª´ 1 ƒë·ªÉ l·∫•y gi·ªù tr∆∞·ªõc ƒë√≥
        }

        // ‚úÖ Truy v·∫•n JOIN c·∫£ 3 b·∫£ng ch·ªâ v·ªõi 1 query
        const raw = await this.dataSource
            .createQueryBuilder()
            .select([
            'machine.Ê©üÂô®Áï™Âè∑ AS machine_no',
            'machine.Ê©üÂô®Âå∫ÂàÜ AS machine_type',
            'machine.CT AS ct',
            'status.X AS x',
            'status.Y AS y',
            'status.ÈÅãËª¢Áä∂ÊÖã AS status',
            'progress.ÁîüÁî£Êï∞ AS counter',
            ])
            .from('DE_MST_Ê©üÂô®„Éû„Çπ„Çø', 'machine')
            .leftJoin('DE_TBL_ÈÅãËª¢Áä∂ÊÖãÂ±•Ê≠¥', 'status', `
            status.Â∑•Â†¥Âå∫ÂàÜ = machine.Â∑•Â†¥Âå∫ÂàÜ AND
            status.Ê©üÂô®Áï™Âè∑ = machine.Ê©üÂô®Áï™Âè∑
            `)
            .leftJoin('DE_TBL_ÁîüÁî£ÈÄ≤Êçó', 'progress', `
            progress.Ê©üÂô®Áï™Âè∑ = machine.Ê©üÂô®Áï™Âè∑ AND
            progress.Êó•‰ªò = :date AND
            progress.ÊôÇÈñì = :hour
            `, { date: shiftDate, hour: hour_for_query })
            .where('machine.Â∑•Â†¥Âå∫ÂàÜ = :factory', { factory: factory_type })
            .getRawMany();

        // ‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ theo y√™u c·∫ßu
        const results = raw.map(row => {
            const machine_type = +row.machine_type;
            const ct = machine_type === 40 ? parseFloat(row.ct) : null;
            const counter = row.counter !== null ? parseInt(row.counter) : null;

            let performance: number | null = null;

            // ‚úÖ Ch·ªâ t√≠nh hi·ªáu su·∫•t cho m√°y lo·∫°i 40, c√≥ ct v√† counter h·ª£p l·ªá
            if (ct && counter !== null && machine_type === 40 && hour_for_query >= 0) {
                let seconds: number;

                if (hour_for_query < 8) {
                // üëâ Tr∆∞·ªùng h·ª£p tr∆∞·ªõc 08:00 ‚Üí ƒëang thu·ªôc ca h√¥m qua
                // ‚Üí C·∫ßn c·ªông th√™m 24 gi·ªù ƒë·ªÉ t√≠nh ch√≠nh x√°c s·ªë gi√¢y t·ª´ 08:00 h√¥m qua ƒë·∫øn hi·ªán t·∫°i
                seconds = (hour_for_query - 8 + 1 + 24) * 3600;
                } else {
                // üëâ Tr∆∞·ªùng h·ª£p ƒëang trong ca h√¥m nay ‚Üí gi·ªù hi·ªán t·∫°i ‚â• 08:00
                // ‚Üí T√≠nh th·ªùi gian t·ª´ 08:00 ƒë·∫øn khung gi·ªù hi·ªán t·∫°i
                seconds = (hour_for_query - 8 + 1) * 3600;
                }

                // ‚úÖ T√≠nh hi·ªáu su·∫•t: % = s·∫£n l∆∞·ª£ng / (s·ªë gi√¢y ch·∫°y / ct)
                performance = +(counter / (seconds / ct)).toFixed(3);
            }

            return {
                machine_no: +row.machine_no,
                x: row.x !== null ? +row.x : null,
                y: row.y !== null ? +row.y : null,
                status: row.status !== null ? +row.status : null,
                ct,
                machine_type,
                hour: machine_type === 40 ? hour_for_query : null,
                counter: machine_type === 40 ? counter : null,
                performance,
            };
            });

        return results;
    }

}
